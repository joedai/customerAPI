<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <http:listener-config name="customerapi-httpListenerConfig" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <apikit:config name="customerapi-config" raml="customerapi.raml" consoleEnabled="false" doc:name="Router" keepRamlBaseUri="false"/>
    <db:mysql-config name="MySQL_Configuration" host="localhost" port="3306" user="root" password="root1234" database="customer_schema" doc:name="MySQL Configuration"/>
    <flow name="customerapi-main">
        <http:listener config-ref="customerapi-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="customerapi-config" doc:name="APIkit Router"/>
        <exception-strategy ref="customerapi-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="customerapi-console">
        <http:listener config-ref="customerapi-httpListenerConfig" path="/console/*" doc:name="HTTP"/>
        <apikit:console config-ref="customerapi-config" doc:name="APIkit Console"/>
    </flow>
    <flow name="put:/customers/{id}:application/json:customerapi-config">
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <db:update config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[update customer set last_name = #[payload.lastName], first_name = #[payload.firstName], address = #[payload.address], last_modified = UTC_TIMESTAMP() where id = #[message.inboundProperties.'http.uri.params'.id]]]></db:parameterized-query>
        </db:update>
        <choice doc:name="Choice">
            <when expression="#[payload.equals(0)]">
                <scripting:component doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException()]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <set-payload value="#[null]" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="delete:/customers/{id}:customerapi-config">
        <db:update config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[update customer set deleted ='true', last_modified = UTC_TIMESTAMP() where id = #[message.inboundProperties.'http.uri.params'.id] and deleted = 'false']]></db:parameterized-query>
        </db:update>
        <choice doc:name="Choice">
            <when expression="#[payload.equals(0)]">
                <scripting:component doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException()]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <set-payload value="#[null]" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="get:/customers:customerapi-config">
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties.'http.query.params'.lastModified == null]">
                <logger level="INFO" doc:name="Logger"/>
                <db:select config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[select id, first_name, last_name, address, last_modified,deleted from customer where deleted = 'false']]></db:parameterized-query>
                </db:select>
            </when>
            <otherwise>
                <db:select config-ref="MySQL_Configuration" doc:name="Query by last modified date">
                    <db:parameterized-query><![CDATA[select id, first_name, last_name, address, last_modified,deleted from customer where last_modified >  STR_TO_DATE(#[message.inboundProperties.'http.query.params'.lastModified], '%a, %d %b %Y %H:%i:%s')]]></db:parameterized-query>
                </db:select>
            </otherwise>
        </choice>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload map ((payload01 , indexOfPayload01) -> {
	id: payload01.id,
	lastModified: (payload01.last_modified as :string {format: "E, d LLL u H:m:s"}) ++ " GMT",
	firstName: payload01.first_name,
	lastName: payload01.last_name,
	address: payload01.address,
	deleted: payload01.deleted
})]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="get:/customers/{id}:customerapi-config">
        <choice doc:name="Check if If-Modified-Since Header is present">
            <when expression="#[message.inboundProperties.'If-Modified-Since' == null]">
                <flow-ref name="GetDataFromDB" doc:name="Flow Reference"/>
            </when>
            <otherwise>
                <db:select config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[select count(*) as cnt from customer_schema.customer
where last_modified >  STR_TO_DATE(#[message.inboundProperties.'If-Modified-Since'], '%a, %d %b %Y %H:%i:%s')
and id = #[message.inboundProperties.'http.uri.params'.id]]]></db:parameterized-query>
                </db:select>
                <choice doc:name="Check if data has been modified since">
                    <when expression="#[payload[0].cnt == 0]">
                        <message-properties-transformer doc:name="Message Properties">
                            <add-message-property key="http.status" value="304"/>
                        </message-properties-transformer>
                        <set-payload value="#[null]" doc:name="Return 304 Not Modified"/>
                    </when>
                    <otherwise>
                        <flow-ref name="GetDataFromDB" doc:name="Flow Reference"/>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
    </flow>
    <flow name="GetDataFromDB" initialState="started">
        <db:select config-ref="MySQL_Configuration" doc:name="Get Customer By ID">
            <db:parameterized-query><![CDATA[select id, first_name, last_name, address, last_modified, deleted from customer where id = #[message.inboundProperties.'http.uri.params'.id] and deleted = 'false']]></db:parameterized-query>
        </db:select>
        <choice doc:name="Check if id exists">
            <when expression="#[payload.size() == 1]">
                <set-payload value="#[payload[0]]" doc:name="Get the first row"/>
                <dw:transform-message doc:name="Copy_of_Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	id : payload.id,
	lastModified: (payload.last_modified as :string {format: "E, d LLL u H:m:s"}) ++ " GMT",
	firstName : payload.first_name,
	lastName : payload.last_name,
	address : payload.address,
	deleted : payload.deleted
}]]></dw:set-payload>
                </dw:transform-message>
                <json:json-to-object-transformer returnClass="java.util.HashMap" mimeType="application/json" doc:name="JSON to Object"/>
                <message-properties-transformer doc:name="Set Last Modified Header">
                    <add-message-property key="Last-Modified" value="#[payload.lastModified]"/>
                </message-properties-transformer>
                <json:object-to-json-transformer mimeType="application/json" doc:name="Object to JSON"/>
            </when>
            <otherwise>
                <scripting:component doc:name="Return 404 ">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException()]]></scripting:script>
                </scripting:component>
            </otherwise>
        </choice>
    </flow>
    <flow name="post:/customers:application/json:customerapi-config">
        <json:json-to-object-transformer returnClass="java.util.List" doc:name="JSON to Object"/>
        <foreach collection="#[message.payload]" doc:name="For Each">
            <db:insert config-ref="MySQL_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[insert into customer (`first_name`, `last_name` , `address`, `last_modified`) VALUES (#[payload.firstName], #[payload.lastName], #[payload.address], UTC_TIMESTAMP())]]></db:parameterized-query>
            </db:insert>
        </foreach>
    </flow>
    <apikit:mapping-exception-strategy name="customerapi-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Customer not found&quot; }" doc:name="Set Payload" mimeType="application/json"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
